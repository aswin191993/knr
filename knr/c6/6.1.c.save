#include <stdio.h>
#include <ctype.h>
#include <string.h>
#define MAXWORD 100
#define NKEYS (sizeof keytab / sizeof(keytab[0]))
#define FOUND -2
struct key {
            char * word;
            int count;
            } keytab[] = {
                "\"",0,
                "auto",0,
                "break", 0,
                "case", 0,
                "char", 0,
                "const", 0,
                "continue", 0,
                "default", 0,
                "define", 0,
                "include", 0,
                "unsigned", 0,
                "void", 0,
                "volatile", 0,
                "while", 0,
           };
int getword(char *, int);
int binsearch(char *, struct key *, int);
int getch(void);
void ungetch(int);
 
/* count C keywords */
main()
{
    int n, t;
    char word[MAXWORD];
    while ((t = getword(word, MAXWORD)) != EOF) {
        if (t == FOUND)
            if ((n = binsearch(word, keytab, NKEYS)) >= 0) {
                keytab[n].count++;
            }
    }
    for (n = 0; n < NKEYS; n++)
        if (keytab[n].count > 0)
            printf("%4d %s\n",
                keytab[n].count, keytab[n].word);
    return 0;
}
/* binsearch: find word in tab[0]...tab[n-1] */
int binsearch(char *word, struct key tab[], int n)
{
    int cond;
    int low, high, mid;
    low = 0;
    high = n - 1;
    while (low <= high) {
        mid = (low+high) / 2;
        if ((cond = strcmp(word, tab[mid].word)) < 0)
            high = mid - 1;
        else if (cond > 0)
            low = mid + 1;
        else
            return mid;
    }
    return -1;
}
 
/* getword: get next word or character from input */
int getword(char *word, int lim)
{
    int c, getch(void);
    void ungetch(int);
    char *w = word;
    *w = '\0';
    while (isspace(c = getch()))
        ;
    if (c != EOF)
        *w++ = c;
    if(c == '/') {
        if((c = getch()) == '*' || c == '/') {
            *w++ = c;
            *w = '\0';
            return FOUND;
        }
        else {
            word = '\0';
            ungetch(c);
            return c;
        }
    }
    if(c == '"') {
        if((c = getch()) == ',' || c == ';' || c == ')') {
            *w = '\0';
            ungetch(c);
            return FOUND;
        }
        else {
            word = '\0';
            ungetch(c);
            return c;
        }
    }
    if (!isalpha(c)) {
        word = '\0';
        return c;
    }
    for ( ; --lim > 0; w++){
        if (!isalnum(*w = getch())) {
            ungetch(*w);
            break;
        }
    }
    *w = '\0';
    return FOUND;
}
 
#define BUFSIZE 100
char buf[BUFSIZE]; /* buffer for ungetch */
int bufp = 0; /* next free position in buf */
 
int getch(void) /* get a (possibly pushed-back) character */
{
    return (bufp > 0) ? buf[--bufp] : getchar();
}
void ungetch(int c) /* push character back on input */
{
    if (bufp >= BUFSIZE)
        printf("ungetch: too many characters\n");
    else
        buf[bufp++] = c;
}
